var searchIndex = JSON.parse('{\
"swiftlet_quic":{"doc":"Swiftlet Quic Library","t":"NEIDENNNKLLLLLLLLLKKKKALLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLDNNNDNNNNDENNNNNNNNLMLLLLLLLLLLLLLLLLLLMMMLLLLMMLLLLMLLLLLLLLLLLLLMLL","n":["EndpointError","Error","Events","Handler","SocketAddr","Unexpected","V4","V6","background_stream_recv","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","connection_ended","connection_ending_warning","connection_started","debug_text","endpoint","eq","fmt","fmt","from","from","from","from","from","from","from_str","hash","into","into","into","ip","is_ipv4","is_ipv6","main_stream_recv","new","new","parse_ascii","partial_cmp","port","run_event_loop","set_ip","set_port","tick","to_owned","to_socket_addrs","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Config","ConfigCreation","ConnectionClose","ConnectionCreation","ConnectionId","ConnectionNotFound","ConnectionPing","ConnectionRecv","ConnectionSend","Endpoint","EndpointError","IsServer","Randomness","SocketCreation","SocketRecv","SocketSend","StreamCreation","StreamRecv","StreamSend","add_client_connection","background_recv_first_bytes","background_stream_send","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close_connection","eq","from","from","from","from","get_num_connections","idle_timeout_in_ms","initial_background_recv_size","initial_main_recv_size","into","into","into","into","keep_alive_timeout","main_recv_first_bytes","main_stream_send","new_client","new_client_with_first_connection","new_server","reliable_stream_buffer","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unreliable_stream_buffer","update","update_keep_alive_duration"],"q":[[0,"swiftlet_quic"],[62,"swiftlet_quic::endpoint"],[131,"core::option"],[132,"core::cmp"],[133,"core::fmt"],[134,"core::fmt"],[135,"core::net::socket_addr"],[136,"core::net::ip_addr"],[137,"core::convert"],[138,"core::net::socket_addr"],[139,"core::hash"],[140,"core::time"],[141,"core::option"],[142,"alloc::string"],[143,"core::any"],[144,"alloc::vec"]],"d":["The endpoint had an error","Errors that the Quic Handler could return","Required Quic Handler Event Callback Functions These …","Quic Handler Structure","An internet socket address, either IPv4 or IPv6.","Not sure what the error is","An IPv4 socket address.","An IPv6 socket address.","Called when there is something to read on the background …","","","","","","","","","","Called when a connection has ended and should be cleaned up","Called when a connection is in the process of ending and …","Called when a new connection is started and is application …","Temporary debug testing callback Can be implemented …","Quic Endpoint Module","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.","Converts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …","Returns the argument unchanged.","Converts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the IP address associated with this socket address.","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Called when there is something to read on the main stream …","Create a Quic Handler by giving it an Endpoint and a …","Creates a new socket address from an IP address and a port …","Parse a socket address from a slice of bytes.","","Returns the port number associated with this socket …","Quic Handler Event Loop Allows the handler to take control …","Changes the IP address associated with this socket address.","Changes the port number associated with this socket …","Called when the next tick occurrs based on the tick …","","","","","","","","","","","","","The Endpoint Configuration Structure","Error with the Quic Config Creation","Error closing a connection","Error creating a connection","A Connection ID structure to communicate with the endpoint …","Cannot find connection from Connection ID","Error sending out a PING","Error having a connection process the received data","Error getting send data from a connection","The Quic Endpoint structure","Endpoint Errors","Error trying to perform a client Endpoint operation on a …","Error with creating or using the randomness structure / …","Error with the UDP socket creation","Error receiving data on the UDP socket","Error sending data on the UDP socket","Error finishing the connection establishment process and …","Error receiving data from the stream","Error sending data on the stream","Add a connection for a client Endpoint","The number of bytes to receive on the background stream …","Send data over the background stream A reminder that the …","","","","","","","","","","","Close a connection with a given error code number","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the number of connections that the Endpoint is managing","The quic connection idle timeout in milliseconds","The initial background stream recieve buffer size This …","The initial main stream recieve buffer size This could be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The keep alive timeout duration If there is a value and …","The number of bytes to receive on the main stream before …","Send data over the main stream A reminder that the …","Create a quic client Endpoint","Create a quic client Endpoint with an initial connection","Create a quic server Endpoint","The quic connection bidirectional stream receive buffer …","","","","","","","","","","","","","","The quic connection unidirectional stream receive buffer …","A way to update the connection id","Update the keep alive duration time Will disable the keep …"],"i":[25,0,0,0,0,25,7,7,22,25,23,7,25,23,7,7,7,7,22,22,22,22,0,7,7,7,25,23,7,7,7,7,7,7,25,23,7,7,7,7,22,23,7,7,7,7,23,7,7,22,7,7,7,25,23,7,25,23,7,25,23,7,0,30,30,30,0,30,30,30,30,0,0,30,30,30,30,30,30,30,30,1,33,1,33,1,2,30,33,1,2,30,2,2,1,2,33,1,2,30,1,33,33,33,33,1,2,30,33,33,1,1,1,1,33,2,33,1,2,30,33,1,2,30,33,1,2,30,33,2,1],"f":[0,0,0,0,0,0,0,0,[[-1,1,2,[4,[3]]],[[6,[5]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[-1,-2],8,[],[]],[[7,7],9],[[-1,1,2,5],10,[]],[[-1,1,2],8,[]],[[-1,1,2],8,[]],[[-1,11],8,[]],0,[[7,7],10],[[7,12],[[14,[8,13]]]],[[7,12],[[14,[8,13]]]],[-1,-1,[]],[-1,-1,[]],[15,7],[[[8,[-1,16]]],7,[[18,[17]]]],[-1,-1,[]],[19,7],[11,[[14,[7,20]]]],[[7,-1],8,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,17],[7,10],[7,10],[[-1,1,2,[4,[3]]],[[6,[5]]],[]],[[1,22],23],[[17,16],7],[[[4,[3]]],[[14,[7,20]]]],[[7,7],[[6,[9]]]],[7,16],[[23,24],[[14,[[6,[1]],25]]]],[[7,17],8],[[7,16],8],[[-1,1],10,[]],[-1,-2,[],[]],[7,[[14,[[26,[7]],27]]]],[-1,28,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,7,11],[[14,[8,30]]]],0,[[1,2,[31,[3]]],[[14,[[8,[32,32]],30]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],8,[],[]],[[1,2,32],[[14,[10,30]]]],[[2,2],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,5],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[1,2,[31,[3]]],[[14,[[8,[32,32]],30]]]],[[7,[4,[3]],11,33],[[14,[1,30]]]],[[7,[4,[3]],11,7,11,33],[[14,[1,30]]]],[[7,[4,[3]],11,11,33],[[14,[1,30]]]],0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,[[2,2],8],[[1,[6,[24]]],8]],"c":[],"p":[[3,"Endpoint",62],[3,"ConnectionId",62],[15,"u8"],[15,"slice"],[15,"usize"],[4,"Option",131],[4,"SocketAddr",0],[15,"tuple"],[4,"Ordering",132],[15,"bool"],[15,"str"],[3,"Formatter",133],[3,"Error",133],[4,"Result",134],[3,"SocketAddrV6",135],[15,"u16"],[4,"IpAddr",136],[8,"Into",137],[3,"SocketAddrV4",135],[3,"AddrParseError",138],[8,"Hasher",139],[8,"Events",0],[3,"Handler",0],[3,"Duration",140],[4,"Error",0],[3,"IntoIter",131],[3,"Error",141],[3,"String",142],[3,"TypeId",143],[4,"EndpointError",62],[3,"Vec",144],[15,"u64"],[3,"Config",62]],"b":[[24,"impl-Display-for-SocketAddr"],[25,"impl-Debug-for-SocketAddr"],[28,"impl-From%3CSocketAddrV6%3E-for-SocketAddr"],[29,"impl-From%3C(I,+u16)%3E-for-SocketAddr"],[31,"impl-From%3CSocketAddrV4%3E-for-SocketAddr"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
